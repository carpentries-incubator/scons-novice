workflow:
  rules:  # Do not create pipelines for tag updates
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

stages:
  - environment
  - test
  - deploy

before_script:
  - package_name='scons-novice'
  # Set the AEA compute environment deployment directory by host
  - aea_projects="/projects"
  - if [ $(hostname) == ??-rfe?.lanl.gov ]; then aea_projects="/usr/projects/ea"; fi
  - aea_compute_path="${aea_projects}/aea_compute"
  - aea_modulefiles="${aea_compute_path}/modulefiles"
  - module use ${aea_modulefiles}
  - module load texlive
  # Start with an AEA environment to put Conda on PATH
  - project_environment="${package_name}-dev"
  - environment_choices="aea-nightly aea-quarterly aea-release"
  - for env in ${environment_choices}; do if [[ -d "${aea_compute_path}/${env}" ]]; then environment=${env}; break; fi; done
  - echo ${environment}
  - module load ${environment}
  # Activate CI environment if available. If not, rely on environment job running before other jobs.
  - module use ${PWD}/modulefiles
  - environment_path="${aea_compute_path}/${project_environment}"
  - echo ${environment_path}
  - if [[ -d ${environment_path} ]]; then module unload ${environment}; module load ${project_environment}; fi
  - conda info
  - conda_artifacts_directory='conda-bld'

environment:
  stage: environment
  variables:
    GIT_STRATEGY: clone
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
  script:
    # Always build from the base/aea compute environment with boa/libmamba
    - module unload ${project_environment}
    - module load ${environment}
    # Don't rebuild environment for merge request pipelines unless the environment is missing
    - if [[ -d "${environment_path}" ]]; then exists=true; else exists=false; fi
    - if [[ $CI_PIPELINE_SOURCE == "merge_request_event" ]] && ${exists}; then exit 0; fi
    # Don't rebuild environment for main unless the environment file has changed or the environment doesn't exist
    - files=$(git diff --name-only ${CI_COMMIT_SHA} ${CI_COMMIT_BEFORE_SHA}) || true
    - if [[ $CI_COMMIT_BRANCH == "main" ]]; then production=true; else production=false; fi
    - if [[ "${files}" == *"environment.yml"* ]]; then modified=true; else modified=false; fi
    - if ${production} && ${exists} && ! ${modified}; then exit 0; fi
    # Re-build the Conda environment on changes to environment files
    - conda env create --prefix ${environment_path} --file environment.yml --solver=libmamba --force
    # Build the R-packages
    - conda activate ${environment_path}
    - PROJECT_TMPDIR="/scratch/$USER/workbench"
    - mkdir ${PROJECT_TMPDIR}
    - TMPDIR=${PROJECT_TMPDIR} R -e 'install.packages(c("sandpaper", "varnish", "pegboard", "tinkr"), repos = list(carpentries="https://carpentries.r-universe.dev/", CRAN="https://cloud.r-project.org"))'
    # Remove write permissions from group to avoid accidental environment changes
    - chmod -R 755 ${environment_path}
    # place the common modulefiles in an accessible location
    - cp ${PWD}/modulefiles/* ${aea_modulefiles}
  tags:
    - shell-aea

test:
  stage: test
  variables:
    GIT_STRATEGY: clone
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - R -e 'sandpaper::build_lesson(preview = FALSE)'
  tags:
    - shell-aea

# It MUST be called pages
pages:
  stage: deploy
  variables:
    GIT_STRATEGY: clone
  dependencies: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == "main"
  script:
    - rm -rf public && mkdir -p public
    - R -e 'sandpaper::build_lesson(preview = FALSE)'
    - cp -r site/docs/* public
  artifacts:
    paths:
      # It MUST be called public
      - public
  tags:
    - shell-aea
